#include "Entropy.h"


void add_density_matrices(	complex<double> &c1,
				complex<double> &c2,
				zMatrix &dm11,
				zMatrix &dm12,
				zMatrix &dm21,
				zMatrix &dm22,
				zMatrix &dmsum)
{
	#pragma omp parallel for
	for(int64_t i = 0; i < dm11.NRows(); i++)
		for(int64_t j = 0; j < dm11.NRows(); j++)
		{
			dmsum(i,j) = c1*conj(c1)*dm11(i,j) + c1*conj(c2)*dm12(i,j) + c2*conj(c1)*dm21(i,j) + conj(c2)*c2*dm22(i,j);	
		}
}

void add_conj_density_matrices(	complex<double> &c1,
				complex<double> &c2,
				zMatrix &dm11,
				zMatrix &dm12,
				zMatrix &dm21,
				zMatrix &dm22,
				zMatrix &dmsum)
{
	#pragma omp parallel for
	for(int64_t i = 0; i < dm11.NRows(); i++)
		for(int64_t j = 0; j < dm11.NRows(); j++)
		{
			dmsum(i,j) = c1*conj(c1)*conj(dm11(i,j)) + c1*conj(c2)*conj(dm12(i,j)) + c2*conj(c1)*conj(dm21(i,j)) + c2*conj(c2)*conj(dm22(i,j));	
		}
}


void add_density_matrices(	complex<double> &c1,
				complex<double> &c2,
				complex<double> &c3,
				zMatrix &dm11,
				zMatrix &dm12,
				zMatrix &dm13,
				zMatrix &dm21,
				zMatrix &dm22,
				zMatrix &dm23,
				zMatrix &dm31,
				zMatrix &dm32,
				zMatrix &dm33,
				zMatrix &dmsum)
{
	#pragma omp parallel for
	for(int64_t i = 0; i < dm11.NRows(); i++)
		for(int64_t j = 0; j < dm11.NRows(); j++)
		{
			dmsum(i,j) = conj(c1)*c1*dm11(i,j) + conj(c1)*c2*dm12(i,j) + conj(c1)*c3*dm13(i,j) + conj(c2)*c1*dm21(i,j) + conj(c2)*c2*dm22(i,j) + conj(c2)*c3*dm23(i,j) + conj(c3)*c1*dm31(i,j) + conj(c3)*c2*dm32(i,j) + conj(c3)*c3*dm33(i,j);	
		}
}

void set_bits_zero_Cut(	int64_t &a,
			vector<int> &Cut)
{
	for(int i = 0; i < Cut.size(); i++)
	{	a = ibclr64(a, Cut[i]);}
}

int64_t set_bits_Cut(	int64_t big_string, 
			int64_t &small_string,
			vector<int> &Cut)
{
	for(int i = 0; i < Cut.size(); i++)
	{
		bool loc = btest64(small_string, i);
		if(loc == 1)
			big_string = ibset64(big_string, Cut[i]);
		else
			big_string = ibclr64(big_string, Cut[i]);
	}

	return big_string;
}



int64_t findstate_psi(	int64_t &rep_id,
			vector<ids> &psi)
{
	int64_t j = -1;
	int64_t n = psi.size();

	int64_t b_min = 0, b_max = n - 1;
	do{
		int64_t b = b_min + (b_max - b_min)/2;
		if(rep_id < psi[b].stateID )
			b_max = b - 1;
		else if (rep_id > psi[b].stateID )
			b_min = b + 1;
		else
		{
			j = b;
			break;
		}
	}while(b_max >= b_min);

	return j;

}


/*
int64_t findstate_basis(	int64_t &rep_id,
				vector<int64_t> &basis)
{
	int64_t j = -1;
	int64_t n = basis.size();

	int64_t b_min = 0, b_max = n - 1;
	do{
		int64_t b = b_min + (b_max - b_min)/2;
		if(rep_id < basis[b] )
			b_max = b - 1;
		else if (rep_id > basis[b])
			b_min = b + 1;
		else
		{
			j = b;
			break;
		}
	}while(b_max >= b_min);

	return j;

}
*/

void density_matrix(	zMatrix &dm,
			vector< ids > &psi,
			vector<int> &Cut)
{
	int64_t n_states = psi.size();
	int64_t n_dm_states = int64_t_power(2, Cut.size());

	#pragma omp parallel for 
	for(int64_t k = 0; k < n_dm_states; k++)
	{
		for(int64_t i = 0; i < n_states; i++)
		{
			int64_t big_string = psi[i].stateID;	
			int64_t statej, statek;

			int64_t big_stringj = big_string; //set_bits_Cut(big_string, j, Cut);	
			int64_t j = 0;
			for(int ii = 0; ii < Cut.size(); ii++)
			{
				bool bii = btest64(big_stringj, Cut[ii]);
				if (bii == 1)
					j = ibset64(j, ii);
			}			

			statej = i;

			int64_t big_stringk = set_bits_Cut(big_string, k, Cut);
			statek = findstate_psi(big_stringk, psi);
				
			if(statek >=0 ) 
			{
			//	dm(j, k) += conj(psi[statej].coeff)*psi[statek].coeff;
				dm(j, k) += psi[statej].coeff*conj(psi[statek].coeff);
			}
		}
	}
}


void density_matrixij(	zMatrix &dm,
			vector< ids > &psi1,
			vector< ids > &psi2,
			vector<int> Cut)
{
	int64_t n1 = psi1.size(), n2 = psi2.size();
	int64_t n_dm = int64_t_power(2, Cut.size());

	#pragma omp parallel for
	for(int64_t k=0; k < n_dm; k++)
	{
		for(int64_t i = 0; i < n1; i++)
		{
			int64_t big_string = psi1[i].stateID;	
			int64_t statej, statek;

			int64_t big_stringj = big_string; //set_bits_Cut(big_string, j, Cut);	
			int64_t j = 0;
			for(int l = 0; l < Cut.size(); l++)
			{
				bool tmp_b = btest64(big_stringj, Cut[l]);
				if (tmp_b == 1)
					j = ibset64(j, l);
			}			

			statej = i;

			int64_t big_stringk = set_bits_Cut(big_string, k, Cut);
			statek = findstate_psi(big_stringk, psi2);
				
			if(statek >=0 ) 
			{	
	//			dm(j, k) += conj(psi1[statej].coeff)*psi2[statek].coeff;
				dm(j, k) += psi1[statej].coeff*conj(psi2[statek].coeff);
			}
		}
	}
}

void density_matrixij_Sz(	zMatrix &dm,
				vector< ids > &psi1,
				vector< ids > &psi2,
				vector<int> Cut,
				int &n_sites,
				int &n_ones,
				ofstream &outfile)
{
	int64_t n1 = psi1.size(), n2 = psi2.size();
	int64_t n_dm = n_choose_k(n_sites, n_ones);

	vector<int64_t> basis;
	constrained_dets(n_sites, n_ones, basis);


	#pragma omp parallel for
	for(int64_t k=0; k < n_dm; k++)
	{
		int64_t sector_k = basis[k];

		for(int64_t i = 0; i < n1; i++)
		{
			int tmp_ones = 0;
			int64_t big_stringj = psi1[i].stateID;	
			int64_t statej, statek;

			int64_t j = 0;
			for(int l = 0; l < Cut.size(); l++)
			{
				bool tmp_b = btest64(big_stringj, Cut[l]);
				if (tmp_b == 1)
				{
					j = ibset64(j, l);
					tmp_ones++;
				}
			}			

			if(tmp_ones == n_ones)
			{
				statej = i;

				int64_t big_stringk = set_bits_Cut(big_stringj, sector_k, Cut);
				statek = findstate_psi(big_stringk, psi2);
					
				if(statek >=0 ) 
				{
					int64_t basis_j = findstate_basis(j, basis);
//					if(basis_j >=0)
						dm(basis_j, k) += psi1[statej].coeff*conj(psi2[statek].coeff);
				}
			}
		}
	}
}

	
complex<double> Von_Neumann_Entropy(	zMatrix &dm)
{
	int64_t n_dm_states = dm.NRows();

	complex<double> sum = complex<double>(0.0,0.0);

	vector< complex<double> > lambdai(n_dm_states);
	zMatrix VR(n_dm_states,n_dm_states);
	
	zMatrix_Diagonalize(dm, lambdai, VR);

	for(int64_t i = 0; i < n_dm_states; i++)
	{		
		if(abs(real(lambdai[i])) > 1e-8 || abs(imag(lambdai[i])) > 1e-8 )
		{	sum = sum + lambdai[i]*log2(real(lambdai[i]));}

	}

	return -sum;

}

complex<double> Renyi_Entropy(	zMatrix &dm)
{
	complex<double> sum = complex<double>(0.0,0.0);
	double sr = 0.0;
	double si = 0.0;

	#pragma omp parallel for default(shared) reduction(+:sr, si)
	for(int64_t i = 0; i < dm.NRows(); i++)
		for(int64_t j = 0; j < dm.NRows(); j++)
		{
//			sum += dm(i, j)*conj(dm(i,j)); //dm(j,i);
			complex<double> tmp = dm(i,j)*conj( dm(i,j) );
		//	complex<double> tmp = dm(i,j)*dm(j,i);
			sr += real(tmp);
			si += imag(tmp);
		}
	
	sum = complex<double> (sr, si);

	return -log2(real(sum));

}

void entanglement_entropies(	vector<ids> &psi,
				vector<int> &Cut,
				ofstream &outfile)
{
		double ts_dm = wall_clock();
		int64_t n_dm_states = int64_t_power(2, Cut.size());
		zMatrix	dm(n_dm_states, n_dm_states, 0.0);
		density_matrix(dm, psi, Cut);
		double te_dm = wall_clock();
		outfile << "\n\n Time for Density Matrix Construction " << (te_dm - ts_dm)/60 << " minutes\n";
	
		double ts_Rentropy = wall_clock();
		outfile << "\n Renyi Entropy = " << Renyi_Entropy(dm);
		double te_Rentropy = wall_clock();
		outfile << "\n Time for Renyi Entropy " << (te_Rentropy - ts_Rentropy)/60 << " minutes\n\n";

		
		double ts_VNentropy = wall_clock();
		outfile << "\n Von-Neumann Entropy = " << Von_Neumann_Entropy(dm);
		double te_VNentropy = wall_clock();
		outfile << "\n Time for VN Entropy " << (te_VNentropy - ts_VNentropy)/60 << " minutes\n\n";
	
}

complex<double> VN_EE(	vector<ids> &psi,
			vector<int> &Cut,
			ofstream &outfile)
{
		int64_t n_dm_states = int64_t_power(2, Cut.size());
		zMatrix	dm(n_dm_states, n_dm_states, 0.0);
		density_matrix(dm, psi, Cut);
		return Von_Neumann_Entropy(dm);
	
}



